#!/usr/bin/env perl

=head1 NAME

sort_imports - sort Kotlin import statements

=head1 SYNOPSIS

B<sort_imports> [B<-i>I<.bak>] [B<-d>[I<lines>]] [B<-o>[B<ascii>|B<idea>|B<auto>]] [B<-c>I<commit-ish>] [B<-v>] [I<directory>|I<file>|B<->]...

=head1 DESCRIPTION

B<sort_imports> sorts Kotlin import statements into a canonical order.

It may be used as a filter in a shell pipeline with B<->, and will also apply to the specified files and Kotlin files found recursively within the specified directories.
If none are given, it defaults to a recursive search of the current working directory.
If invoked within a Git working tree, it will follow F<.gitignore> exclusions.

=head1 OPTIONS

=over 4

=item --inplace=I<.bak>, -iI<.bak>

Replaces files with modified content, with a backup of the original to extension I<.bak> if non-empty.

=item --diff[=I<lines>], -d[I<lines>]

Prints unified diff to standard output, with I<lines> (default 3) lines of context.

=item --import-order=I<order>, -oI<order>

Sorts imports by

=over 4

=item ascii

lexicographic order

=item idea

lexicographic order within each group of B<*>, B<java.*>, B<javax.*>, B<kotlin.*>, alias imports

=item auto

guessing B<ascii> or B<auto> based on the existing import order

=back

=item --if-changed-since=I<commit-ish>, -cI<commit-ish>

Reverts changes since I<commit-ish> if only blank and import lines have changed.

=item --verbose, -v

Reports B<ok> or B<fix> to standard error for every file processed.

=item --help, -h, -?

Shows this help.

=item --usage

Prints out the help synopsis.

=item --version, -V

Displays the version.

=back

=cut

use v5.18;
use Fcntl qw(S_IFMT);
use File::Basename qw(fileparse);
use File::Find qw(find);
use File::Temp ();
use Getopt::Long qw(GetOptions HelpMessage VersionMessage);
use List::Util qw(max min);
use Symbol qw(qualify_to_ref);
use open qw(:std :utf8);

our $VERSION = '0.1';

sub is_git () {
    state $is_git = do {
        defined(my $pid = fork) or die "fork: $@";
        if (!$pid) {
            open STDIN, '</dev/null';
            open STDOUT, '>/dev/null';
            open STDERR, '>/dev/null';
            exec qw(git rev-parse --is-inside-work-tree) or die "exec: $@";
        }
        waitpid $pid, 0;
        $? == 0;
    };
    return $is_git;
}

sub git_verify ($) {
    defined(my $pid = open my $out, '-|') or die "fork: $@";
    if (!$pid) {
        open STDIN, '</dev/null';
        exec qw(git rev-parse --verify), @_ or die "exec: $@";
    }
    chomp(my ($res) = <$out>), waitpid $pid, 0;
    $? == 0 or die "git rev-parse: $?\n";
    return $res;
}

sub expand ($@) {
    my ($stdio, @args) = @_;
    return if $stdio && !@args;
    my @found;
    if (is_git) {
        defined(my $pid = open my $out, '-|') or die "fork: $@";
        if (!$pid) {
            open STDIN, '</dev/null';
            exec qw(git ls-files -z --cached --others --exclude-standard --),
                @args
                    ? map { /\.kts?\Z/ ? $_ : s/\*?\Z/*.kt/r, s/\*?\Z/*.kts/r } @args
                    : qw(*.kt *.kts)
                or die "exec: $@";
        }
        {
            local $/ = "\0";
            chomp, -f && push @found, $_ while <$out>;
        }
        close $out or die "git ls-files: $?\n";
    } else {
        find
            { wanted => sub { push @found, $_ if -f _ && /\.kts?\Z/ }, no_chdir => 1 },
            @args ? @args : qw(.);
    }
    return @found;
}

sub detect_order (@) {
    my $seen;
    for (@_) {
        if (/^import\s+(?:javax?|kotlin)\./) { $seen = 1 }
        elsif ($seen && /^import\s/ && !/\sas\s/) { return 'ascii' }
    }
    return $seen ? 'idea' : 'ascii';
}

sub list_eq (\@\@) {
    my ($a, $b) = @_;
    my $n = $#$a;
    return $n == $#$b && !grep $$a[$_] ne $$b[$_], 0..$n;
}

sub unchanged (\@\@) {
    my ($a, $b) = @_;
    my @a = grep /\S/ && !/^import\s/, @$a;
    my @b = grep /\S/ && !/^import\s/, @$b;
    return list_eq @a, @b;
}

sub diff_lines (\@\@;$$$$) {
    my ($a, $b, $a0, $b0, $a1, $b1) = @_;
    $a0 //= 0, $b0 //= 0, $a1 //= $#$a, $b1 //= $#$b;
    $a0++, $b0++ while $a0 <= $a1 && $b0 <= $b1 && $$a[$a0] eq $$b[$b0];
    $a1--, $b1-- while $a0 <= $a1 && $b0 <= $b1 && $$a[$a1] eq $$b[$b1];
    my (%f, %g, $x, $y);
    $f{$a0, $b0} = $g{$a1, $b1} = 1;
    while (1) {
        (my @f, %f) = keys %f or last;
        for (@f) {
            ($x, $y) = split /\Q$;/;
            if ($x < $a1 && $y < $b1 && $$a[$x] eq $$b[$y]) {
                goto RECURSE if exists $g{$x + 1, $y + 1};
                $f{$x + 1, $y + 1} = 1;
            }
            else {
                $f{$x + 1, $y} = 1 if $x < $a1;
                $f{$x, $y + 1} = 1 if $y < $b1;
            }
        }
        (my @g, %g) = keys %g or last;
        for (@g) {
            ($x, $y) = split /\Q$;/;
            if ($x > $a0 && $y > $b0 && $$a[$x] eq $$b[$y]) {
                goto RECURSE if exists $f{$x + 1, $y + 1};
                $g{$x - 1, $y - 1} = 1;
            }
            else {
                $g{$x - 1, $y} = 1 if $x > $a0;
                $g{$x, $y - 1} = 1 if $y > $b0;
            }
        }
    }
    return map(['-', $_, $b0], $a0..$a1), map(['+', $a1 + 1, $_], $b0..$b1);
    RECURSE:
    return &diff_lines($a, $b, $a0, $b0, $x - 1, $y - 1),
        &diff_lines($a, $b, $x + 1, $y + 1, $a1, $b1)
}

sub diff_hunks (\@\@;$) {
    my ($a, $b, $context) = @_;
    $context //= 3;
    my (@hunks, $hunk_x, $hunk_y);
    for (&diff_lines($a, $b)) {
        my ($d, $x, $y) = @$_;
        if (!@hunks || $hunk_x < $x && $hunk_y < $y) { push @hunks, [$_] }
        else { push @{$hunks[-1]}, $_ }
        $hunk_x = $x + 2 * $context;
        $hunk_y = $y + 2 * $context;
    }
    return @hunks;
}

sub print_diff (*\@\@$$$) {
    my $fh = qualify_to_ref(shift, caller);
    my ($a, $b, $name_a, $name_b, $context) = @_;
    $name_a //= '-', $name_b //= $name_a, $context //= 3;
    print $fh "--- $name_a\n+++ $name_b\n";
    for (&diff_hunks($a, $b, $context)) {
        my @lines = @$_;
        my $x0 = max 0, min(map $$_[1], @$_) - $context;
        my $y0 = max 0, min(map $$_[2], @$_) - $context;
        my $x1 = min scalar @$a, max(map $$_[1] + ($$_[0] eq '-'), @$_) + $context;
        my $y1 = min scalar @$b, max(map $$_[2] + ($$_[0] eq '+'), @$_) + $context;
        printf "\@\@ -%d,%d +%d,%d \@\@\n", $x0 + 1, $x1 - $x0, $y0 + 1, $y1 - $y0;
        my ($x, $y) = ($x0, $y0);
        while ($x < $x1 || $y < $y1) {
            my ($line, $eof);
            if (@lines && $lines[0][0] eq '-' && $lines[0][1] == $x && $lines[0][2] == $y) {
                $line = "-$$a[$x]", $eof = $x++ >= $#$a;
                shift @lines;
            }
            elsif (@lines && $lines[0][0] eq '+' && $lines[0][1] == $x && $lines[0][2] == $y) {
                $line = "+$$b[$y]", $eof = $y++ >= $#$b;
                shift @lines;
            }
            else {
                die 'internal error: invariants violated' if $$a[$x] ne $$b[$y];
                $line = " $$a[$x]", $eof = $x++ >= $#$a & $y++ >= $#$b;
            }
            print $fh $line, $line !~ /\n\Z/ && ($eof ? "\n\\ No newline at end of file\n" : "\n");
        }
    }
}

sub process (&$\@\@) {
    my ($output, $order, $base, $input) = @_;
    my ($start) = grep $$input[$_] =~ /^import\s/, 0..$#_ or return &$output(@$input);
    my $end = $start;
    for ($start + 1..$#$input) {
        if ($$input[$_] =~ /^import\s/) { $end = $_ }
        elsif ($$input[$_] =~ /\S/) { last }
    }
    my @imports = grep /^import\s/, @$input[$start..$end];
    $order = detect_order(@$base) if $order eq 'auto';
    if ($order eq 'ascii') { @imports = sort @imports }
    elsif ($order eq 'idea') {
        @imports = sort {
            $a =~ /\sas\s/ <=> $b =~ /\sas\s/ or
            $a =~ /^import\s+(?:javax?|kotlin)\./ <=> $b =~ /^import\s+(?:javax?|kotlin)\./ or
            $a cmp $b
        } @imports;
    }
    else { die "unsupported --order=$order\n" }
    my @output = @$input;
    splice @output, $start, $end - $start + 1, @imports;
    return &$output(@output);
}

sub replace_file ($$@) {
    my ($name, $extension, @contents) = @_;
    my (undef, undef, $mode) = stat $name or warn "stat: $@";
    my ($basename, $dirname, $suffix) = fileparse($name, qr/\.[^.]*/);
    my $tmpfile = File::Temp->new(TEMPLATE => "$basename.XXXX", DIR => $dirname, SUFFIX => $suffix);
    binmode $tmpfile, ':utf8';
    chmod $mode & ~S_IFMT, $tmpfile or warn "chmod: $@" if defined $mode;
    print $tmpfile @contents;
    $tmpfile->close or die "close: $@";
    rename $name, "$name$extension" or die "rename: $@" if $extension ne '';
    rename $tmpfile->filename, $name or die "rename: $@";
    $tmpfile->unlink_on_destroy(0);
}

Getopt::Long::Configure qw(gnu_getopt);
my $since;
GetOptions
    'inplace|i:s' => \my $inplace,
    'diff|d:3' => \my $diff,
    'import-order|o=s' => \(my $order = 'auto'),
    'if-changed-since|c=s' => sub {
        my ($name, $val) = @_;
        local $@;
        eval { $since = git_verify "$val^{commit}" };
        $@ and die "$name: $@";
    },
    'verbose|v' => \my $verbose,
    '' => \my $stdio,
    'help' => sub { HelpMessage -verbose => 2, -perldocopt => '-oTerm' },
    'h|?' => sub { HelpMessage -verbose => 1 },
    'usage' => sub { HelpMessage },
    'version|V' => sub { VersionMessage },
     or HelpMessage 1;
$stdio && !@ARGV || !defined $since || is_git
    or HelpMessage -exitval => 1, -msg => '--if-changed-since requires git';
$verbose ||= !defined $inplace && !defined $diff;

if ($stdio) {
    my @input = <STDIN>;
    process {
        if (defined $diff) { print_diff STDOUT, @input, @_, undef, undef, $diff }
        else { print @_ }
    } $order, @input, @input;
}
for my $name (expand $stdio, @ARGV) {
    my @input = do {
        open my $fh, '<', $name or die "open: $@";
        <$fh>;
    };
    my $blob;
    if (defined $since) {
        local $@;
        eval { $blob = git_verify "$since:$name" };
    }
    my @base;
    if (defined $blob) {
        open my $fh, '-|', qw(git cat-file blob), $blob or die "fork: $@";
        @base = <$fh>;
        close $fh or die "git cat-file: $?\n";
    }
    else { @base = @input }
    process {
        @_ = @base if defined $since && unchanged @base, @_;
        if (list_eq @input, @_) { say STDERR "ok $name" if $verbose }
        else {
            say STDERR "fix $name" if $verbose;
            print_diff STDOUT, @input, @_, "a/$name", "b/$name", $diff if defined $diff;
            replace_file $name, $inplace, @_ if defined $inplace;
        }
    } $order, @base, @input;
}
